{"items":[{"t":"C","n":"Redis","p":"Redis.html","d":"","f":{"n":"[Global Namespace]","p":"[Global_Namespace].html"}},{"t":"C","n":"RedisArray","p":"RedisArray.html","d":"","f":{"n":"[Global Namespace]","p":"[Global_Namespace].html"}},{"t":"C","n":"RedisCluster","p":"RedisCluster.html","d":"","f":{"n":"[Global Namespace]","p":"[Global_Namespace].html"}},{"t":"C","n":"RedisClusterException","p":"RedisClusterException.html","d":null,"f":{"n":"[Global Namespace]","p":"[Global_Namespace].html"}},{"t":"C","n":"RedisException","p":"RedisException.html","d":null,"f":{"n":"[Global Namespace]","p":"[Global_Namespace].html"}},{"t":"C","n":"RedisSentinel","p":"RedisSentinel.html","d":"","f":{"n":"[Global Namespace]","p":"[Global_Namespace].html"}},{"t":"M","n":"Redis::__construct","p":"Redis.html#method___construct","d":"<p>Create a new Redis instance.  If passed sufficient information in the\noptions array it is also possible to connect to an instance at the same\ntime.</p>"},{"t":"M","n":"Redis::__destruct","p":"Redis.html#method___destruct","d":null},{"t":"M","n":"Redis::_compress","p":"Redis.html#method__compress","d":"<p>Compress a value with the currently configured compressor as set with\nRedis::setOption().</p>"},{"t":"M","n":"Redis::_uncompress","p":"Redis.html#method__uncompress","d":"<p>Uncompress the provided argument that has been compressed with the\ncurrently configured compressor as set with Redis::setOption().</p>"},{"t":"M","n":"Redis::_prefix","p":"Redis.html#method__prefix","d":"<p>Prefix the passed argument with the currently set key prefix as set\nwith Redis::setOption().</p>"},{"t":"M","n":"Redis::_serialize","p":"Redis.html#method__serialize","d":"<p>Serialize the provided value with the currently set serializer as set\nwith Redis::setOption().</p>"},{"t":"M","n":"Redis::_unserialize","p":"Redis.html#method__unserialize","d":"<p>Unserialize the passed argument with the currently set serializer as set\nwith Redis::setOption().</p>"},{"t":"M","n":"Redis::_pack","p":"Redis.html#method__pack","d":"<p>Pack the provided value with the configured serializer and compressor\nas set with Redis::setOption().</p>"},{"t":"M","n":"Redis::_unpack","p":"Redis.html#method__unpack","d":"<p>Unpack the provided value with the configured compressor and serializer\nas set with Redis::setOption().</p>"},{"t":"M","n":"Redis::acl","p":"Redis.html#method_acl","d":null},{"t":"M","n":"Redis::append","p":"Redis.html#method_append","d":"<p>Append data to a Redis STRING key.</p>"},{"t":"M","n":"Redis::auth","p":"Redis.html#method_auth","d":"<p>Authenticate a Redis connection after its been established.</p>"},{"t":"M","n":"Redis::bgSave","p":"Redis.html#method_bgSave","d":"<p>Execute a save of the Redis database in the background.</p>"},{"t":"M","n":"Redis::bgrewriteaof","p":"Redis.html#method_bgrewriteaof","d":"<p>Asynchronously rewrite Redis' append-only file</p>"},{"t":"M","n":"Redis::bitcount","p":"Redis.html#method_bitcount","d":"<p>Count the number of set bits in a Redis string.</p>"},{"t":"M","n":"Redis::bitop","p":"Redis.html#method_bitop","d":null},{"t":"M","n":"Redis::bitpos","p":"Redis.html#method_bitpos","d":"<p>Return the position of the first bit set to 0 or 1 in a string.</p>"},{"t":"M","n":"Redis::blPop","p":"Redis.html#method_blPop","d":"<p>Pop an element off the beginning of a Redis list or lists, potentially blocking up to a specified\ntimeout.  This method may be called in two distinct ways, of which examples are provided below.</p>"},{"t":"M","n":"Redis::brPop","p":"Redis.html#method_brPop","d":"<p>Pop an element off of the end of a Redis list or lists, potentially blocking up to a specified timeout.</p>"},{"t":"M","n":"Redis::brpoplpush","p":"Redis.html#method_brpoplpush","d":"<p>Pop an element from the end of a Redis list, pushing it to the beginning of another Redis list,\noptionally blocking up to a specified timeout.</p>"},{"t":"M","n":"Redis::bzPopMax","p":"Redis.html#method_bzPopMax","d":"<p>POP the maximum scoring element off of one or more sorted sets, blocking up to a specified\ntimeout if no elements are available.</p>"},{"t":"M","n":"Redis::bzPopMin","p":"Redis.html#method_bzPopMin","d":"<p>POP the minimum scoring element off of one or more sorted sets, blocking up to a specified timeout\nif no elements are available</p>"},{"t":"M","n":"Redis::bzmpop","p":"Redis.html#method_bzmpop","d":"<p>POP one or more elements from one or more sorted sets, blocking up to a specified amount of time\nwhen no elements are available.</p>"},{"t":"M","n":"Redis::zmpop","p":"Redis.html#method_zmpop","d":"<p>POP one or more of the highest or lowest scoring elements from one or more sorted sets.</p>"},{"t":"M","n":"Redis::blmpop","p":"Redis.html#method_blmpop","d":"<p>Pop one or more elements from one or more Redis LISTs, blocking up to a specified timeout when\nno elements are available.</p>"},{"t":"M","n":"Redis::lmpop","p":"Redis.html#method_lmpop","d":"<p>Pop one or more elements off of one or more Redis LISTs.</p>"},{"t":"M","n":"Redis::clearLastError","p":"Redis.html#method_clearLastError","d":"<p>Reset any last error on the connection to NULL</p>"},{"t":"M","n":"Redis::client","p":"Redis.html#method_client","d":null},{"t":"M","n":"Redis::close","p":"Redis.html#method_close","d":null},{"t":"M","n":"Redis::command","p":"Redis.html#method_command","d":null},{"t":"M","n":"Redis::config","p":"Redis.html#method_config","d":"<p>Execute the Redis CONFIG command in a variety of ways.  What the command does in particular depends\non the <code>$operation</code> qualifier.</p>"},{"t":"M","n":"Redis::connect","p":"Redis.html#method_connect","d":null},{"t":"M","n":"Redis::copy","p":"Redis.html#method_copy","d":"<p>Make a copy of a redis key.</p>"},{"t":"M","n":"Redis::dbSize","p":"Redis.html#method_dbSize","d":"<p>Return the number of keys in the currently selected Redis database.</p>"},{"t":"M","n":"Redis::debug","p":"Redis.html#method_debug","d":null},{"t":"M","n":"Redis::decr","p":"Redis.html#method_decr","d":"<p>Decrement a Redis integer by 1 or a provided value.</p>"},{"t":"M","n":"Redis::decrBy","p":"Redis.html#method_decrBy","d":"<p>Decrement a redis integer by a value</p>"},{"t":"M","n":"Redis::del","p":"Redis.html#method_del","d":"<p>Delete one or more keys from Redis.</p>"},{"t":"M","n":"Redis::delete","p":"Redis.html#method_delete","d":""},{"t":"M","n":"Redis::discard","p":"Redis.html#method_discard","d":"<p>Discard a transaction currently in progress.</p>"},{"t":"M","n":"Redis::dump","p":"Redis.html#method_dump","d":"<p>Dump Redis' internal binary representation of a key.</p>"},{"t":"M","n":"Redis::echo","p":"Redis.html#method_echo","d":"<p>Have Redis repeat back an arbitrary string to the client.</p>"},{"t":"M","n":"Redis::eval","p":"Redis.html#method_eval","d":"<p>Execute a LUA script on the redis server.</p>"},{"t":"M","n":"Redis::eval_ro","p":"Redis.html#method_eval_ro","d":"<p>This is simply the read-only variant of eval, meaning the underlying script\nmay not modify data in redis.</p>"},{"t":"M","n":"Redis::evalsha","p":"Redis.html#method_evalsha","d":"<p>Execute a LUA script on the server but instead of sending the script, send\nthe SHA1 hash of the script.</p>"},{"t":"M","n":"Redis::evalsha_ro","p":"Redis.html#method_evalsha_ro","d":"<p>This is simply the read-only variant of evalsha, meaning the underlying script\nmay not modify data in redis.</p>"},{"t":"M","n":"Redis::exec","p":"Redis.html#method_exec","d":"<p>Execute either a MULTI or PIPELINE block and return the array of replies.</p>"},{"t":"M","n":"Redis::exists","p":"Redis.html#method_exists","d":"<p>Test if one or more keys exist.</p>"},{"t":"M","n":"Redis::expire","p":"Redis.html#method_expire","d":"<p>Sets an expiration in seconds on the key in question.  If connected to\nredis-server &gt;= 7.0.0 you may send an additional &quot;mode&quot; argument which\nmodifies how the command will execute.</p>"},{"t":"M","n":"Redis::expireAt","p":"Redis.html#method_expireAt","d":"<p>Set a key's expiration to a specific Unix timestamp in seconds.  If\nconnected to Redis &gt;= 7.0.0 you can pass an optional 'mode' argument.</p>"},{"t":"M","n":"Redis::failover","p":"Redis.html#method_failover","d":null},{"t":"M","n":"Redis::expiretime","p":"Redis.html#method_expiretime","d":"<p>Get the expiration of a given key as a unix timestamp</p>"},{"t":"M","n":"Redis::pexpiretime","p":"Redis.html#method_pexpiretime","d":"<p>Get the expriation timestamp of a given Redis key but in milliseconds.</p>"},{"t":"M","n":"Redis::flushAll","p":"Redis.html#method_flushAll","d":"<p>Deletes every key in all Redis databases</p>"},{"t":"M","n":"Redis::flushDB","p":"Redis.html#method_flushDB","d":"<p>Deletes all the keys of the currently selected database.</p>"},{"t":"M","n":"Redis::geoadd","p":"Redis.html#method_geoadd","d":null},{"t":"M","n":"Redis::geodist","p":"Redis.html#method_geodist","d":null},{"t":"M","n":"Redis::geohash","p":"Redis.html#method_geohash","d":null},{"t":"M","n":"Redis::geopos","p":"Redis.html#method_geopos","d":null},{"t":"M","n":"Redis::georadius","p":"Redis.html#method_georadius","d":null},{"t":"M","n":"Redis::georadius_ro","p":"Redis.html#method_georadius_ro","d":null},{"t":"M","n":"Redis::georadiusbymember","p":"Redis.html#method_georadiusbymember","d":null},{"t":"M","n":"Redis::georadiusbymember_ro","p":"Redis.html#method_georadiusbymember_ro","d":null},{"t":"M","n":"Redis::geosearch","p":"Redis.html#method_geosearch","d":null},{"t":"M","n":"Redis::geosearchstore","p":"Redis.html#method_geosearchstore","d":null},{"t":"M","n":"Redis::get","p":"Redis.html#method_get","d":null},{"t":"M","n":"Redis::getAuth","p":"Redis.html#method_getAuth","d":"<p>Get the authentication information on the connection, if any.</p>"},{"t":"M","n":"Redis::getBit","p":"Redis.html#method_getBit","d":null},{"t":"M","n":"Redis::getEx","p":"Redis.html#method_getEx","d":null},{"t":"M","n":"Redis::getDBNum","p":"Redis.html#method_getDBNum","d":null},{"t":"M","n":"Redis::getDel","p":"Redis.html#method_getDel","d":null},{"t":"M","n":"Redis::getHost","p":"Redis.html#method_getHost","d":"<p>Return the host or Unix socket we are connected to.</p>"},{"t":"M","n":"Redis::getLastError","p":"Redis.html#method_getLastError","d":"<p>Get the last error returned to us from Redis, if any.</p>"},{"t":"M","n":"Redis::getMode","p":"Redis.html#method_getMode","d":"<p>Returns whether the connection is in ATOMIC, MULTI, or PIPELINE mode</p>"},{"t":"M","n":"Redis::getOption","p":"Redis.html#method_getOption","d":"<p>Retrieve the value of a configuration setting as set by Redis::setOption()</p>"},{"t":"M","n":"Redis::getPersistentID","p":"Redis.html#method_getPersistentID","d":"<p>Get the persistent connection ID, if there is one.</p>"},{"t":"M","n":"Redis::getPort","p":"Redis.html#method_getPort","d":"<p>Get the port we are connected to.  This number will be zero if we are connected to a unix socket.</p>"},{"t":"M","n":"Redis::getRange","p":"Redis.html#method_getRange","d":"<p>Retrieve a substring of a string by index.</p>"},{"t":"M","n":"Redis::lcs","p":"Redis.html#method_lcs","d":"<p>Get the longest common subsequence between two string keys.</p>"},{"t":"M","n":"Redis::getReadTimeout","p":"Redis.html#method_getReadTimeout","d":"<p>Get the currently set read timeout on the connection.</p>"},{"t":"M","n":"Redis::getset","p":"Redis.html#method_getset","d":"<p>Sets a key and returns any previously set value, if the key already existed.</p>"},{"t":"M","n":"Redis::getTimeout","p":"Redis.html#method_getTimeout","d":"<p>Retrieve any set connection timeout</p>"},{"t":"M","n":"Redis::getTransferredBytes","p":"Redis.html#method_getTransferredBytes","d":null},{"t":"M","n":"Redis::hDel","p":"Redis.html#method_hDel","d":"<p>Remove one or more fields from a hash.</p>"},{"t":"M","n":"Redis::hExists","p":"Redis.html#method_hExists","d":"<p>Checks whether a field exists in a hash.</p>"},{"t":"M","n":"Redis::hGet","p":"Redis.html#method_hGet","d":null},{"t":"M","n":"Redis::hGetAll","p":"Redis.html#method_hGetAll","d":"<p>Read every field and value from a hash.</p>"},{"t":"M","n":"Redis::hIncrBy","p":"Redis.html#method_hIncrBy","d":"<p>Increment a hash field's value by an integer</p>"},{"t":"M","n":"Redis::hIncrByFloat","p":"Redis.html#method_hIncrByFloat","d":"<p>Increment a hash field by a floating point value</p>"},{"t":"M","n":"Redis::hKeys","p":"Redis.html#method_hKeys","d":"<p>Retrieve all of the fields of a hash.</p>"},{"t":"M","n":"Redis::hLen","p":"Redis.html#method_hLen","d":"<p>Get the number of fields in a hash.</p>"},{"t":"M","n":"Redis::hMget","p":"Redis.html#method_hMget","d":"<p>Get one or more fields from a hash.</p>"},{"t":"M","n":"Redis::hMset","p":"Redis.html#method_hMset","d":"<p>Add or update one or more hash fields and values</p>"},{"t":"M","n":"Redis::hRandField","p":"Redis.html#method_hRandField","d":"<p>Get one or more random field from a hash.</p>"},{"t":"M","n":"Redis::hSet","p":"Redis.html#method_hSet","d":null},{"t":"M","n":"Redis::hSetNx","p":"Redis.html#method_hSetNx","d":"<p>Set a hash field and value, but only if that field does not exist</p>"},{"t":"M","n":"Redis::hStrLen","p":"Redis.html#method_hStrLen","d":"<p>Get the string length of a hash field</p>"},{"t":"M","n":"Redis::hVals","p":"Redis.html#method_hVals","d":"<p>Get all of the values from a hash.</p>"},{"t":"M","n":"Redis::hscan","p":"Redis.html#method_hscan","d":"<p>Iterate over the fields and values of a hash in an incremental fashion.</p>"},{"t":"M","n":"Redis::incr","p":"Redis.html#method_incr","d":"<p>Increment a key's value, optionally by a specifc amount.</p>"},{"t":"M","n":"Redis::incrBy","p":"Redis.html#method_incrBy","d":"<p>Increment a key by a specific integer value</p>"},{"t":"M","n":"Redis::incrByFloat","p":"Redis.html#method_incrByFloat","d":"<p>Increment a numeric key by a floating point value.</p>"},{"t":"M","n":"Redis::info","p":"Redis.html#method_info","d":"<p>Retrieve information about the connected redis-server.  If no arguments are passed to\nthis function, redis will return every info field.  Alternatively you may pass a specific\nsection you want returned (e.g. 'server', or 'memory') to receive only information pertaining\nto that section.</p>"},{"t":"M","n":"Redis::isConnected","p":"Redis.html#method_isConnected","d":"<p>Check if we are currently connected to a Redis instance.</p>"},{"t":"M","n":"Redis::keys","p":"Redis.html#method_keys","d":""},{"t":"M","n":"Redis::lInsert","p":"Redis.html#method_lInsert","d":""},{"t":"M","n":"Redis::lLen","p":"Redis.html#method_lLen","d":null},{"t":"M","n":"Redis::lMove","p":"Redis.html#method_lMove","d":null},{"t":"M","n":"Redis::lPop","p":"Redis.html#method_lPop","d":null},{"t":"M","n":"Redis::lPos","p":"Redis.html#method_lPos","d":null},{"t":"M","n":"Redis::lPush","p":"Redis.html#method_lPush","d":""},{"t":"M","n":"Redis::rPush","p":"Redis.html#method_rPush","d":""},{"t":"M","n":"Redis::lPushx","p":"Redis.html#method_lPushx","d":""},{"t":"M","n":"Redis::rPushx","p":"Redis.html#method_rPushx","d":""},{"t":"M","n":"Redis::lSet","p":"Redis.html#method_lSet","d":null},{"t":"M","n":"Redis::lastSave","p":"Redis.html#method_lastSave","d":null},{"t":"M","n":"Redis::lindex","p":"Redis.html#method_lindex","d":null},{"t":"M","n":"Redis::lrange","p":"Redis.html#method_lrange","d":null},{"t":"M","n":"Redis::lrem","p":"Redis.html#method_lrem","d":""},{"t":"M","n":"Redis::ltrim","p":"Redis.html#method_ltrim","d":null},{"t":"M","n":"Redis::mget","p":"Redis.html#method_mget","d":""},{"t":"M","n":"Redis::migrate","p":"Redis.html#method_migrate","d":null},{"t":"M","n":"Redis::move","p":"Redis.html#method_move","d":null},{"t":"M","n":"Redis::mset","p":"Redis.html#method_mset","d":null},{"t":"M","n":"Redis::msetnx","p":"Redis.html#method_msetnx","d":null},{"t":"M","n":"Redis::multi","p":"Redis.html#method_multi","d":null},{"t":"M","n":"Redis::object","p":"Redis.html#method_object","d":null},{"t":"M","n":"Redis::open","p":"Redis.html#method_open","d":""},{"t":"M","n":"Redis::pconnect","p":"Redis.html#method_pconnect","d":null},{"t":"M","n":"Redis::persist","p":"Redis.html#method_persist","d":null},{"t":"M","n":"Redis::pexpire","p":"Redis.html#method_pexpire","d":"<p>Sets an expiration in milliseconds on a given key.  If connected to Redis &gt;= 7.0.0\nyou can pass an optional mode argument that modifies how the command will execute.</p>"},{"t":"M","n":"Redis::pexpireAt","p":"Redis.html#method_pexpireAt","d":"<p>Set a key's expiration to a specific Unix Timestamp in milliseconds.  If connected to\nRedis &gt;= 7.0.0 you can pass an optional 'mode' argument.</p>"},{"t":"M","n":"Redis::pfadd","p":"Redis.html#method_pfadd","d":"<p>Add one or more elements to a Redis HyperLogLog key</p>"},{"t":"M","n":"Redis::pfcount","p":"Redis.html#method_pfcount","d":"<p>Retrieve the cardinality of a Redis HyperLogLog key.</p>"},{"t":"M","n":"Redis::pfmerge","p":"Redis.html#method_pfmerge","d":"<p>Merge one or more source HyperLogLog sets into a destination set.</p>"},{"t":"M","n":"Redis::ping","p":"Redis.html#method_ping","d":"<p>PING the redis server with an optional string argument.</p>"},{"t":"M","n":"Redis::pipeline","p":"Redis.html#method_pipeline","d":"<p>Enter into pipeline mode.</p>"},{"t":"M","n":"Redis::popen","p":"Redis.html#method_popen","d":""},{"t":"M","n":"Redis::psetex","p":"Redis.html#method_psetex","d":""},{"t":"M","n":"Redis::psubscribe","p":"Redis.html#method_psubscribe","d":"<p>Subscribe to one or more glob-style patterns</p>"},{"t":"M","n":"Redis::pttl","p":"Redis.html#method_pttl","d":"<p>Get a keys time to live in milliseconds.</p>"},{"t":"M","n":"Redis::publish","p":"Redis.html#method_publish","d":"<p>Publish a message to a pubsub channel</p>"},{"t":"M","n":"Redis::pubsub","p":"Redis.html#method_pubsub","d":null},{"t":"M","n":"Redis::punsubscribe","p":"Redis.html#method_punsubscribe","d":"<p>Unsubscribe from one or more channels by pattern</p>"},{"t":"M","n":"Redis::rPop","p":"Redis.html#method_rPop","d":"<p>Pop one or more elements from the end of a list.</p>"},{"t":"M","n":"Redis::randomKey","p":"Redis.html#method_randomKey","d":"<p>Return a random key from the current database</p>"},{"t":"M","n":"Redis::rawcommand","p":"Redis.html#method_rawcommand","d":"<p>Execute any arbitrary Redis command by name.</p>"},{"t":"M","n":"Redis::rename","p":"Redis.html#method_rename","d":"<p>Unconditionally rename a key from $old_name to $new_name</p>"},{"t":"M","n":"Redis::renameNx","p":"Redis.html#method_renameNx","d":"<p>Renames $key_src to $key_dst but only if newkey does not exist.</p>"},{"t":"M","n":"Redis::reset","p":"Redis.html#method_reset","d":"<p>Reset the state of the connection.</p>"},{"t":"M","n":"Redis::restore","p":"Redis.html#method_restore","d":"<p>Restore a key by the binary payload generated by the DUMP command.</p>"},{"t":"M","n":"Redis::role","p":"Redis.html#method_role","d":"<p>Query whether the connected instance is a primary or replica</p>"},{"t":"M","n":"Redis::rpoplpush","p":"Redis.html#method_rpoplpush","d":"<p>Atomically pop an element off the end of a Redis LIST and push it to the beginning of\nanother.</p>"},{"t":"M","n":"Redis::sAdd","p":"Redis.html#method_sAdd","d":"<p>Add one or more values to a Redis SET key.</p>"},{"t":"M","n":"Redis::sAddArray","p":"Redis.html#method_sAddArray","d":"<p>Add one ore more values to a Redis SET key.  This is an alternative to Redis::sadd() but\ninstead of being variadic, takes a single array of values.</p>"},{"t":"M","n":"Redis::sDiff","p":"Redis.html#method_sDiff","d":"<p>Given one or more Redis SETS, this command returns all of the members from the first\nset that are not in any subsequent set.</p>"},{"t":"M","n":"Redis::sDiffStore","p":"Redis.html#method_sDiffStore","d":"<p>This method performs the same operation as SDIFF except it stores the resulting diff\nvalues in a specified destination key.</p>"},{"t":"M","n":"Redis::sInter","p":"Redis.html#method_sInter","d":"<p>Given one or more Redis SET keys, this command will return all of the elements that are\nin every one.</p>"},{"t":"M","n":"Redis::sintercard","p":"Redis.html#method_sintercard","d":"<p>Compute the intersection of one or more sets and return the cardinality of the result.</p>"},{"t":"M","n":"Redis::sInterStore","p":"Redis.html#method_sInterStore","d":"<p>Perform the intersection of one or more Redis SETs, storing the result in a destination\nkey, rather than returning them.</p>"},{"t":"M","n":"Redis::sMembers","p":"Redis.html#method_sMembers","d":"<p>Retrieve every member from a set key.</p>"},{"t":"M","n":"Redis::sMisMember","p":"Redis.html#method_sMisMember","d":"<p>Check if one or more values are members of a set.</p>"},{"t":"M","n":"Redis::sMove","p":"Redis.html#method_sMove","d":"<p>Pop a member from one set and push it onto another.  This command will create the\ndestination set if it does not currently exist.</p>"},{"t":"M","n":"Redis::sPop","p":"Redis.html#method_sPop","d":"<p>Remove one or more elements from a set.</p>"},{"t":"M","n":"Redis::sRandMember","p":"Redis.html#method_sRandMember","d":"<p>Retrieve one or more random members of a set.</p>"},{"t":"M","n":"Redis::sUnion","p":"Redis.html#method_sUnion","d":"<p>Returns the union of one or more Redis SET keys.</p>"},{"t":"M","n":"Redis::sUnionStore","p":"Redis.html#method_sUnionStore","d":"<p>Perform a union of one or more Redis SET keys and store the result in a new set</p>"},{"t":"M","n":"Redis::save","p":"Redis.html#method_save","d":"<p>Persist the Redis database to disk.  This command will block the server until the save is\ncompleted.  For a nonblocking alternative, see Redis::bgsave().</p>"},{"t":"M","n":"Redis::scan","p":"Redis.html#method_scan","d":"<p>Incrementally scan the Redis keyspace, with optional pattern and type matching.</p>"},{"t":"M","n":"Redis::scard","p":"Redis.html#method_scard","d":"<p>Retrieve the number of members in a Redis set.</p>"},{"t":"M","n":"Redis::script","p":"Redis.html#method_script","d":"<p>An administrative command used to interact with LUA scripts stored on the server.</p>"},{"t":"M","n":"Redis::select","p":"Redis.html#method_select","d":"<p>Select a specific Redis database.</p>"},{"t":"M","n":"Redis::set","p":"Redis.html#method_set","d":"<p>Create or set a Redis STRING key to a value.</p>"},{"t":"M","n":"Redis::setBit","p":"Redis.html#method_setBit","d":"<p>Set a specific bit in a Redis string to zero or one</p>"},{"t":"M","n":"Redis::setRange","p":"Redis.html#method_setRange","d":"<p>Update or append to a Redis string at a specific starting index</p>"},{"t":"M","n":"Redis::setOption","p":"Redis.html#method_setOption","d":"<p>Set a configurable option on the Redis object.</p>"},{"t":"M","n":"Redis::setex","p":"Redis.html#method_setex","d":"<p>Set a Redis STRING key with a specific expiration in seconds.</p>"},{"t":"M","n":"Redis::setnx","p":"Redis.html#method_setnx","d":"<p>Set a key to a value, but only if that key does not already exist.</p>"},{"t":"M","n":"Redis::sismember","p":"Redis.html#method_sismember","d":"<p>Check whether a given value is the member of a Redis SET.</p>"},{"t":"M","n":"Redis::slaveof","p":"Redis.html#method_slaveof","d":"<p>Turn a redis instance into a replica of another or promote a replica\nto a primary.</p>"},{"t":"M","n":"Redis::replicaof","p":"Redis.html#method_replicaof","d":"<p>Used to turn a Redis instance into a replica of another, or to remove\nreplica status promoting the instance to a primary.</p>"},{"t":"M","n":"Redis::touch","p":"Redis.html#method_touch","d":"<p>Update one or more keys last modified metadata.</p>"},{"t":"M","n":"Redis::slowlog","p":"Redis.html#method_slowlog","d":"<p>Interact with Redis' slowlog functionality in various ways, depending\non the value of 'operation'.</p>"},{"t":"M","n":"Redis::sort","p":"Redis.html#method_sort","d":"<p>Sort the contents of a Redis key in various ways.</p>"},{"t":"M","n":"Redis::sort_ro","p":"Redis.html#method_sort_ro","d":"<p>This is simply a read-only variant of the sort command</p>"},{"t":"M","n":"Redis::sortAsc","p":"Redis.html#method_sortAsc","d":""},{"t":"M","n":"Redis::sortAscAlpha","p":"Redis.html#method_sortAscAlpha","d":""},{"t":"M","n":"Redis::sortDesc","p":"Redis.html#method_sortDesc","d":""},{"t":"M","n":"Redis::sortDescAlpha","p":"Redis.html#method_sortDescAlpha","d":""},{"t":"M","n":"Redis::srem","p":"Redis.html#method_srem","d":"<p>Remove one or more values from a Redis SET key.</p>"},{"t":"M","n":"Redis::sscan","p":"Redis.html#method_sscan","d":"<p>Scan the members of a redis SET key.</p>"},{"t":"M","n":"Redis::strlen","p":"Redis.html#method_strlen","d":"<p>Retrieve the length of a Redis STRING key.</p>"},{"t":"M","n":"Redis::subscribe","p":"Redis.html#method_subscribe","d":"<p>Subscribe to one or more Redis pubsub channels.</p>"},{"t":"M","n":"Redis::swapdb","p":"Redis.html#method_swapdb","d":"<p>Atomically swap two Redis databases so that all of the keys in the source database will\nnow be in the destination database and vice-versa.</p>"},{"t":"M","n":"Redis::time","p":"Redis.html#method_time","d":"<p>Retrieve the server time from the connected Redis instance.</p>"},{"t":"M","n":"Redis::ttl","p":"Redis.html#method_ttl","d":"<p>Get the amount of time a Redis key has before it will expire, in seconds.</p>"},{"t":"M","n":"Redis::type","p":"Redis.html#method_type","d":"<p>Get the type of a given Redis key.</p>"},{"t":"M","n":"Redis::unlink","p":"Redis.html#method_unlink","d":"<p>Delete one or more keys from the Redis database.  Unlike this operation, the actual\ndeletion is asynchronous, meaning it is safe to delete large keys without fear of\nRedis blocking for a long period of time.</p>"},{"t":"M","n":"Redis::unsubscribe","p":"Redis.html#method_unsubscribe","d":"<p>Unsubscribe from one or more subscribed channels.</p>"},{"t":"M","n":"Redis::unwatch","p":"Redis.html#method_unwatch","d":"<p>Remove any previously WATCH'ed keys in a transaction.</p>"},{"t":"M","n":"Redis::watch","p":"Redis.html#method_watch","d":""},{"t":"M","n":"Redis::wait","p":"Redis.html#method_wait","d":"<p>Block the client up to the provided timeout until a certain number of replicas have confirmed\nrecieving them.</p>"},{"t":"M","n":"Redis::xack","p":"Redis.html#method_xack","d":null},{"t":"M","n":"Redis::xadd","p":"Redis.html#method_xadd","d":"<p>Append a message to a stream.</p>"},{"t":"M","n":"Redis::xautoclaim","p":"Redis.html#method_xautoclaim","d":null},{"t":"M","n":"Redis::xclaim","p":"Redis.html#method_xclaim","d":null},{"t":"M","n":"Redis::xdel","p":"Redis.html#method_xdel","d":"<p>Remove one or more specific IDs from a stream.</p>"},{"t":"M","n":"Redis::xgroup","p":"Redis.html#method_xgroup","d":"XGROUP"},{"t":"M","n":"Redis::xinfo","p":"Redis.html#method_xinfo","d":"<p>Retrieve information about a stream key.</p>"},{"t":"M","n":"Redis::xlen","p":"Redis.html#method_xlen","d":"<p>Get the number of messages in a Redis STREAM key.</p>"},{"t":"M","n":"Redis::xpending","p":"Redis.html#method_xpending","d":"<p>Interact with stream messages that have been consumed by a consumer group but not yet\nacknowledged with XACK.</p>"},{"t":"M","n":"Redis::xrange","p":"Redis.html#method_xrange","d":"<p>Get a range of entries from a STREAM key.</p>"},{"t":"M","n":"Redis::xread","p":"Redis.html#method_xread","d":"<p>Consume one or more unconsumed elements in one or more streams.</p>"},{"t":"M","n":"Redis::xreadgroup","p":"Redis.html#method_xreadgroup","d":"<p>Read one or more messages using a consumer group.</p>"},{"t":"M","n":"Redis::xrevrange","p":"Redis.html#method_xrevrange","d":"<p>Get a range of entries from a STREAM ke in reverse cronological order.</p>"},{"t":"M","n":"Redis::xtrim","p":"Redis.html#method_xtrim","d":"<p>Truncate a STREAM key in various ways.</p>"},{"t":"M","n":"Redis::zAdd","p":"Redis.html#method_zAdd","d":"<p>Add one or more elements and scores to a Redis sorted set.</p>"},{"t":"M","n":"Redis::zCard","p":"Redis.html#method_zCard","d":"<p>Return the number of elements in a sorted set.</p>"},{"t":"M","n":"Redis::zCount","p":"Redis.html#method_zCount","d":"<p>Count the number of members in a sorted set with scores inside a provided range.</p>"},{"t":"M","n":"Redis::zIncrBy","p":"Redis.html#method_zIncrBy","d":"<p>Create or increment the score of a member in a Redis sorted set</p>"},{"t":"M","n":"Redis::zLexCount","p":"Redis.html#method_zLexCount","d":"<p>Count the number of elements in a sorted set whos members fall within the provided\nlexographical range.</p>"},{"t":"M","n":"Redis::zMscore","p":"Redis.html#method_zMscore","d":"<p>Retrieve the score of one or more members in a sorted set.</p>"},{"t":"M","n":"Redis::zPopMax","p":"Redis.html#method_zPopMax","d":"<p>Pop one or more of the highest scoring elements from a sorted set.</p>"},{"t":"M","n":"Redis::zPopMin","p":"Redis.html#method_zPopMin","d":"<p>Pop one or more of the lowest scoring elements from a sorted set.</p>"},{"t":"M","n":"Redis::zRange","p":"Redis.html#method_zRange","d":"<p>Retrieve a range of elements of a sorted set between a start and end point.</p>"},{"t":"M","n":"Redis::zRangeByLex","p":"Redis.html#method_zRangeByLex","d":"<p>Retrieve a range of elements from a sorted set by legographical range.</p>"},{"t":"M","n":"Redis::zRangeByScore","p":"Redis.html#method_zRangeByScore","d":"<p>Retrieve a range of members from a sorted set by their score.</p>"},{"t":"M","n":"Redis::zrangestore","p":"Redis.html#method_zrangestore","d":"<p>This command is similar to ZRANGE except that instead of returning the values directly\nit will store them in a destination key provided by the user</p>"},{"t":"M","n":"Redis::zRandMember","p":"Redis.html#method_zRandMember","d":"<p>Retrieve one or more random members from a Redis sorted set.</p>"},{"t":"M","n":"Redis::zRank","p":"Redis.html#method_zRank","d":"<p>Get the rank of a member of a sorted set, by score.</p>"},{"t":"M","n":"Redis::zRem","p":"Redis.html#method_zRem","d":"<p>Remove one or more members from a Redis sorted set.</p>"},{"t":"M","n":"Redis::zRemRangeByLex","p":"Redis.html#method_zRemRangeByLex","d":"<p>Remove zero or more elements from a Redis sorted set by legographical range.</p>"},{"t":"M","n":"Redis::zRemRangeByRank","p":"Redis.html#method_zRemRangeByRank","d":"<p>Remove one or more members of a sorted set by their rank.</p>"},{"t":"M","n":"Redis::zRemRangeByScore","p":"Redis.html#method_zRemRangeByScore","d":"<p>Remove one or more members of a sorted set by their score.</p>"},{"t":"M","n":"Redis::zRevRange","p":"Redis.html#method_zRevRange","d":"<p>List the members of a Redis sorted set in reverse order</p>"},{"t":"M","n":"Redis::zRevRangeByLex","p":"Redis.html#method_zRevRangeByLex","d":"<p>List members of a Redis sorted set within a legographical range, in reverse order.</p>"},{"t":"M","n":"Redis::zRevRangeByScore","p":"Redis.html#method_zRevRangeByScore","d":"<p>List elements from a Redis sorted set by score, highest to lowest</p>"},{"t":"M","n":"Redis::zRevRank","p":"Redis.html#method_zRevRank","d":"<p>Retrieve a member of a sorted set by reverse rank.</p>"},{"t":"M","n":"Redis::zScore","p":"Redis.html#method_zScore","d":"<p>Get the score of a member of a sorted set.</p>"},{"t":"M","n":"Redis::zdiff","p":"Redis.html#method_zdiff","d":"<p>Given one or more sorted set key names, return every element that is in the first\nset but not any of the others.</p>"},{"t":"M","n":"Redis::zdiffstore","p":"Redis.html#method_zdiffstore","d":"<p>Store the difference of one or more sorted sets in a destination sorted set.</p>"},{"t":"M","n":"Redis::zinter","p":"Redis.html#method_zinter","d":"<p>Compute the intersection of one or more sorted sets and return the members</p>"},{"t":"M","n":"Redis::zintercard","p":"Redis.html#method_zintercard","d":"<p>Similar to ZINTER but instead of returning the intersected values, this command returns the\ncardinality of the intersected set.</p>"},{"t":"M","n":"Redis::zinterstore","p":"Redis.html#method_zinterstore","d":"<p>Compute the intersection of one ore more sorted sets storing the result in a new sorted set.</p>"},{"t":"M","n":"Redis::zscan","p":"Redis.html#method_zscan","d":"<p>Scan the members of a sorted set incrementally, using a cursor</p>"},{"t":"M","n":"Redis::zunion","p":"Redis.html#method_zunion","d":"<p>Retrieve the union of one or more sorted sets</p>"},{"t":"M","n":"Redis::zunionstore","p":"Redis.html#method_zunionstore","d":"<p>Perform a union on one or more Redis sets and store the result in a destination sorted set.</p>"},{"t":"M","n":"RedisArray::__call","p":"RedisArray.html#method___call","d":null},{"t":"M","n":"RedisArray::__construct","p":"RedisArray.html#method___construct","d":null},{"t":"M","n":"RedisArray::_continuum","p":"RedisArray.html#method__continuum","d":null},{"t":"M","n":"RedisArray::_distributor","p":"RedisArray.html#method__distributor","d":null},{"t":"M","n":"RedisArray::_function","p":"RedisArray.html#method__function","d":null},{"t":"M","n":"RedisArray::_hosts","p":"RedisArray.html#method__hosts","d":null},{"t":"M","n":"RedisArray::_instance","p":"RedisArray.html#method__instance","d":null},{"t":"M","n":"RedisArray::_rehash","p":"RedisArray.html#method__rehash","d":null},{"t":"M","n":"RedisArray::_target","p":"RedisArray.html#method__target","d":null},{"t":"M","n":"RedisArray::bgsave","p":"RedisArray.html#method_bgsave","d":null},{"t":"M","n":"RedisArray::del","p":"RedisArray.html#method_del","d":null},{"t":"M","n":"RedisArray::discard","p":"RedisArray.html#method_discard","d":null},{"t":"M","n":"RedisArray::exec","p":"RedisArray.html#method_exec","d":null},{"t":"M","n":"RedisArray::flushall","p":"RedisArray.html#method_flushall","d":null},{"t":"M","n":"RedisArray::flushdb","p":"RedisArray.html#method_flushdb","d":null},{"t":"M","n":"RedisArray::getOption","p":"RedisArray.html#method_getOption","d":null},{"t":"M","n":"RedisArray::hscan","p":"RedisArray.html#method_hscan","d":null},{"t":"M","n":"RedisArray::info","p":"RedisArray.html#method_info","d":null},{"t":"M","n":"RedisArray::keys","p":"RedisArray.html#method_keys","d":null},{"t":"M","n":"RedisArray::mget","p":"RedisArray.html#method_mget","d":null},{"t":"M","n":"RedisArray::mset","p":"RedisArray.html#method_mset","d":null},{"t":"M","n":"RedisArray::multi","p":"RedisArray.html#method_multi","d":null},{"t":"M","n":"RedisArray::ping","p":"RedisArray.html#method_ping","d":null},{"t":"M","n":"RedisArray::save","p":"RedisArray.html#method_save","d":null},{"t":"M","n":"RedisArray::scan","p":"RedisArray.html#method_scan","d":null},{"t":"M","n":"RedisArray::select","p":"RedisArray.html#method_select","d":null},{"t":"M","n":"RedisArray::setOption","p":"RedisArray.html#method_setOption","d":null},{"t":"M","n":"RedisArray::sscan","p":"RedisArray.html#method_sscan","d":null},{"t":"M","n":"RedisArray::unlink","p":"RedisArray.html#method_unlink","d":null},{"t":"M","n":"RedisArray::unwatch","p":"RedisArray.html#method_unwatch","d":null},{"t":"M","n":"RedisArray::zscan","p":"RedisArray.html#method_zscan","d":null},{"t":"M","n":"RedisCluster::__construct","p":"RedisCluster.html#method___construct","d":null},{"t":"M","n":"RedisCluster::_compress","p":"RedisCluster.html#method__compress","d":""},{"t":"M","n":"RedisCluster::_uncompress","p":"RedisCluster.html#method__uncompress","d":""},{"t":"M","n":"RedisCluster::_serialize","p":"RedisCluster.html#method__serialize","d":""},{"t":"M","n":"RedisCluster::_unserialize","p":"RedisCluster.html#method__unserialize","d":""},{"t":"M","n":"RedisCluster::_pack","p":"RedisCluster.html#method__pack","d":""},{"t":"M","n":"RedisCluster::_unpack","p":"RedisCluster.html#method__unpack","d":""},{"t":"M","n":"RedisCluster::_prefix","p":"RedisCluster.html#method__prefix","d":""},{"t":"M","n":"RedisCluster::_masters","p":"RedisCluster.html#method__masters","d":null},{"t":"M","n":"RedisCluster::_redir","p":"RedisCluster.html#method__redir","d":null},{"t":"M","n":"RedisCluster::acl","p":"RedisCluster.html#method_acl","d":""},{"t":"M","n":"RedisCluster::append","p":"RedisCluster.html#method_append","d":""},{"t":"M","n":"RedisCluster::bgrewriteaof","p":"RedisCluster.html#method_bgrewriteaof","d":""},{"t":"M","n":"RedisCluster::bgsave","p":"RedisCluster.html#method_bgsave","d":""},{"t":"M","n":"RedisCluster::bitcount","p":"RedisCluster.html#method_bitcount","d":""},{"t":"M","n":"RedisCluster::bitop","p":"RedisCluster.html#method_bitop","d":""},{"t":"M","n":"RedisCluster::bitpos","p":"RedisCluster.html#method_bitpos","d":"<p>Return the position of the first bit set to 0 or 1 in a string.</p>"},{"t":"M","n":"RedisCluster::blpop","p":"RedisCluster.html#method_blpop","d":"<p>See Redis::blpop()</p>"},{"t":"M","n":"RedisCluster::brpop","p":"RedisCluster.html#method_brpop","d":"<p>See Redis::brpop()</p>"},{"t":"M","n":"RedisCluster::brpoplpush","p":"RedisCluster.html#method_brpoplpush","d":"<p>See Redis::brpoplpush()</p>"},{"t":"M","n":"RedisCluster::bzpopmax","p":"RedisCluster.html#method_bzpopmax","d":""},{"t":"M","n":"RedisCluster::bzpopmin","p":"RedisCluster.html#method_bzpopmin","d":""},{"t":"M","n":"RedisCluster::bzmpop","p":"RedisCluster.html#method_bzmpop","d":""},{"t":"M","n":"RedisCluster::zmpop","p":"RedisCluster.html#method_zmpop","d":""},{"t":"M","n":"RedisCluster::blmpop","p":"RedisCluster.html#method_blmpop","d":""},{"t":"M","n":"RedisCluster::lmpop","p":"RedisCluster.html#method_lmpop","d":""},{"t":"M","n":"RedisCluster::clearlasterror","p":"RedisCluster.html#method_clearlasterror","d":""},{"t":"M","n":"RedisCluster::client","p":"RedisCluster.html#method_client","d":""},{"t":"M","n":"RedisCluster::close","p":"RedisCluster.html#method_close","d":""},{"t":"M","n":"RedisCluster::cluster","p":"RedisCluster.html#method_cluster","d":""},{"t":"M","n":"RedisCluster::command","p":"RedisCluster.html#method_command","d":""},{"t":"M","n":"RedisCluster::config","p":"RedisCluster.html#method_config","d":""},{"t":"M","n":"RedisCluster::dbsize","p":"RedisCluster.html#method_dbsize","d":""},{"t":"M","n":"RedisCluster::decr","p":"RedisCluster.html#method_decr","d":""},{"t":"M","n":"RedisCluster::decrby","p":"RedisCluster.html#method_decrby","d":""},{"t":"M","n":"RedisCluster::decrbyfloat","p":"RedisCluster.html#method_decrbyfloat","d":""},{"t":"M","n":"RedisCluster::del","p":"RedisCluster.html#method_del","d":""},{"t":"M","n":"RedisCluster::discard","p":"RedisCluster.html#method_discard","d":""},{"t":"M","n":"RedisCluster::dump","p":"RedisCluster.html#method_dump","d":""},{"t":"M","n":"RedisCluster::echo","p":"RedisCluster.html#method_echo","d":""},{"t":"M","n":"RedisCluster::eval","p":"RedisCluster.html#method_eval","d":""},{"t":"M","n":"RedisCluster::eval_ro","p":"RedisCluster.html#method_eval_ro","d":""},{"t":"M","n":"RedisCluster::evalsha","p":"RedisCluster.html#method_evalsha","d":""},{"t":"M","n":"RedisCluster::evalsha_ro","p":"RedisCluster.html#method_evalsha_ro","d":""},{"t":"M","n":"RedisCluster::exec","p":"RedisCluster.html#method_exec","d":""},{"t":"M","n":"RedisCluster::exists","p":"RedisCluster.html#method_exists","d":""},{"t":"M","n":"RedisCluster::touch","p":"RedisCluster.html#method_touch","d":""},{"t":"M","n":"RedisCluster::expire","p":"RedisCluster.html#method_expire","d":""},{"t":"M","n":"RedisCluster::expireat","p":"RedisCluster.html#method_expireat","d":""},{"t":"M","n":"RedisCluster::expiretime","p":"RedisCluster.html#method_expiretime","d":""},{"t":"M","n":"RedisCluster::pexpiretime","p":"RedisCluster.html#method_pexpiretime","d":""},{"t":"M","n":"RedisCluster::flushall","p":"RedisCluster.html#method_flushall","d":""},{"t":"M","n":"RedisCluster::flushdb","p":"RedisCluster.html#method_flushdb","d":""},{"t":"M","n":"RedisCluster::geoadd","p":"RedisCluster.html#method_geoadd","d":""},{"t":"M","n":"RedisCluster::geodist","p":"RedisCluster.html#method_geodist","d":""},{"t":"M","n":"RedisCluster::geohash","p":"RedisCluster.html#method_geohash","d":""},{"t":"M","n":"RedisCluster::geopos","p":"RedisCluster.html#method_geopos","d":""},{"t":"M","n":"RedisCluster::georadius","p":"RedisCluster.html#method_georadius","d":""},{"t":"M","n":"RedisCluster::georadius_ro","p":"RedisCluster.html#method_georadius_ro","d":""},{"t":"M","n":"RedisCluster::georadiusbymember","p":"RedisCluster.html#method_georadiusbymember","d":""},{"t":"M","n":"RedisCluster::georadiusbymember_ro","p":"RedisCluster.html#method_georadiusbymember_ro","d":""},{"t":"M","n":"RedisCluster::get","p":"RedisCluster.html#method_get","d":""},{"t":"M","n":"RedisCluster::getbit","p":"RedisCluster.html#method_getbit","d":""},{"t":"M","n":"RedisCluster::getlasterror","p":"RedisCluster.html#method_getlasterror","d":""},{"t":"M","n":"RedisCluster::getmode","p":"RedisCluster.html#method_getmode","d":""},{"t":"M","n":"RedisCluster::getoption","p":"RedisCluster.html#method_getoption","d":""},{"t":"M","n":"RedisCluster::getrange","p":"RedisCluster.html#method_getrange","d":""},{"t":"M","n":"RedisCluster::lcs","p":"RedisCluster.html#method_lcs","d":""},{"t":"M","n":"RedisCluster::getset","p":"RedisCluster.html#method_getset","d":""},{"t":"M","n":"RedisCluster::gettransferredbytes","p":"RedisCluster.html#method_gettransferredbytes","d":""},{"t":"M","n":"RedisCluster::hdel","p":"RedisCluster.html#method_hdel","d":""},{"t":"M","n":"RedisCluster::hexists","p":"RedisCluster.html#method_hexists","d":""},{"t":"M","n":"RedisCluster::hget","p":"RedisCluster.html#method_hget","d":""},{"t":"M","n":"RedisCluster::hgetall","p":"RedisCluster.html#method_hgetall","d":""},{"t":"M","n":"RedisCluster::hincrby","p":"RedisCluster.html#method_hincrby","d":""},{"t":"M","n":"RedisCluster::hincrbyfloat","p":"RedisCluster.html#method_hincrbyfloat","d":""},{"t":"M","n":"RedisCluster::hkeys","p":"RedisCluster.html#method_hkeys","d":""},{"t":"M","n":"RedisCluster::hlen","p":"RedisCluster.html#method_hlen","d":""},{"t":"M","n":"RedisCluster::hmget","p":"RedisCluster.html#method_hmget","d":""},{"t":"M","n":"RedisCluster::hmset","p":"RedisCluster.html#method_hmset","d":""},{"t":"M","n":"RedisCluster::hscan","p":"RedisCluster.html#method_hscan","d":""},{"t":"M","n":"RedisCluster::hset","p":"RedisCluster.html#method_hset","d":""},{"t":"M","n":"RedisCluster::hsetnx","p":"RedisCluster.html#method_hsetnx","d":""},{"t":"M","n":"RedisCluster::hstrlen","p":"RedisCluster.html#method_hstrlen","d":""},{"t":"M","n":"RedisCluster::hvals","p":"RedisCluster.html#method_hvals","d":""},{"t":"M","n":"RedisCluster::incr","p":"RedisCluster.html#method_incr","d":""},{"t":"M","n":"RedisCluster::incrby","p":"RedisCluster.html#method_incrby","d":""},{"t":"M","n":"RedisCluster::incrbyfloat","p":"RedisCluster.html#method_incrbyfloat","d":""},{"t":"M","n":"RedisCluster::info","p":"RedisCluster.html#method_info","d":"<p>Retrieve information about the connected redis-server.  If no arguments are passed to\nthis function, redis will return every info field.  Alternatively you may pass a specific\nsection you want returned (e.g. 'server', or 'memory') to receive only information pertaining\nto that section.</p>"},{"t":"M","n":"RedisCluster::keys","p":"RedisCluster.html#method_keys","d":""},{"t":"M","n":"RedisCluster::lastsave","p":"RedisCluster.html#method_lastsave","d":""},{"t":"M","n":"RedisCluster::lget","p":"RedisCluster.html#method_lget","d":""},{"t":"M","n":"RedisCluster::lindex","p":"RedisCluster.html#method_lindex","d":""},{"t":"M","n":"RedisCluster::linsert","p":"RedisCluster.html#method_linsert","d":""},{"t":"M","n":"RedisCluster::llen","p":"RedisCluster.html#method_llen","d":""},{"t":"M","n":"RedisCluster::lpop","p":"RedisCluster.html#method_lpop","d":""},{"t":"M","n":"RedisCluster::lpush","p":"RedisCluster.html#method_lpush","d":""},{"t":"M","n":"RedisCluster::lpushx","p":"RedisCluster.html#method_lpushx","d":""},{"t":"M","n":"RedisCluster::lrange","p":"RedisCluster.html#method_lrange","d":""},{"t":"M","n":"RedisCluster::lrem","p":"RedisCluster.html#method_lrem","d":""},{"t":"M","n":"RedisCluster::lset","p":"RedisCluster.html#method_lset","d":""},{"t":"M","n":"RedisCluster::ltrim","p":"RedisCluster.html#method_ltrim","d":""},{"t":"M","n":"RedisCluster::mget","p":"RedisCluster.html#method_mget","d":""},{"t":"M","n":"RedisCluster::mset","p":"RedisCluster.html#method_mset","d":""},{"t":"M","n":"RedisCluster::msetnx","p":"RedisCluster.html#method_msetnx","d":""},{"t":"M","n":"RedisCluster::multi","p":"RedisCluster.html#method_multi","d":null},{"t":"M","n":"RedisCluster::object","p":"RedisCluster.html#method_object","d":""},{"t":"M","n":"RedisCluster::persist","p":"RedisCluster.html#method_persist","d":""},{"t":"M","n":"RedisCluster::pexpire","p":"RedisCluster.html#method_pexpire","d":""},{"t":"M","n":"RedisCluster::pexpireat","p":"RedisCluster.html#method_pexpireat","d":""},{"t":"M","n":"RedisCluster::pfadd","p":"RedisCluster.html#method_pfadd","d":""},{"t":"M","n":"RedisCluster::pfcount","p":"RedisCluster.html#method_pfcount","d":""},{"t":"M","n":"RedisCluster::pfmerge","p":"RedisCluster.html#method_pfmerge","d":""},{"t":"M","n":"RedisCluster::ping","p":"RedisCluster.html#method_ping","d":"<p>PING an instance in the redis cluster.</p>"},{"t":"M","n":"RedisCluster::psetex","p":"RedisCluster.html#method_psetex","d":""},{"t":"M","n":"RedisCluster::psubscribe","p":"RedisCluster.html#method_psubscribe","d":""},{"t":"M","n":"RedisCluster::pttl","p":"RedisCluster.html#method_pttl","d":""},{"t":"M","n":"RedisCluster::publish","p":"RedisCluster.html#method_publish","d":""},{"t":"M","n":"RedisCluster::pubsub","p":"RedisCluster.html#method_pubsub","d":""},{"t":"M","n":"RedisCluster::punsubscribe","p":"RedisCluster.html#method_punsubscribe","d":""},{"t":"M","n":"RedisCluster::randomkey","p":"RedisCluster.html#method_randomkey","d":""},{"t":"M","n":"RedisCluster::rawcommand","p":"RedisCluster.html#method_rawcommand","d":""},{"t":"M","n":"RedisCluster::rename","p":"RedisCluster.html#method_rename","d":""},{"t":"M","n":"RedisCluster::renamenx","p":"RedisCluster.html#method_renamenx","d":""},{"t":"M","n":"RedisCluster::restore","p":"RedisCluster.html#method_restore","d":""},{"t":"M","n":"RedisCluster::role","p":"RedisCluster.html#method_role","d":""},{"t":"M","n":"RedisCluster::rpop","p":"RedisCluster.html#method_rpop","d":""},{"t":"M","n":"RedisCluster::rpoplpush","p":"RedisCluster.html#method_rpoplpush","d":""},{"t":"M","n":"RedisCluster::rpush","p":"RedisCluster.html#method_rpush","d":""},{"t":"M","n":"RedisCluster::rpushx","p":"RedisCluster.html#method_rpushx","d":""},{"t":"M","n":"RedisCluster::sadd","p":"RedisCluster.html#method_sadd","d":""},{"t":"M","n":"RedisCluster::saddarray","p":"RedisCluster.html#method_saddarray","d":""},{"t":"M","n":"RedisCluster::save","p":"RedisCluster.html#method_save","d":""},{"t":"M","n":"RedisCluster::scan","p":"RedisCluster.html#method_scan","d":""},{"t":"M","n":"RedisCluster::scard","p":"RedisCluster.html#method_scard","d":""},{"t":"M","n":"RedisCluster::script","p":"RedisCluster.html#method_script","d":""},{"t":"M","n":"RedisCluster::sdiff","p":"RedisCluster.html#method_sdiff","d":""},{"t":"M","n":"RedisCluster::sdiffstore","p":"RedisCluster.html#method_sdiffstore","d":""},{"t":"M","n":"RedisCluster::set","p":"RedisCluster.html#method_set","d":""},{"t":"M","n":"RedisCluster::setbit","p":"RedisCluster.html#method_setbit","d":""},{"t":"M","n":"RedisCluster::setex","p":"RedisCluster.html#method_setex","d":""},{"t":"M","n":"RedisCluster::setnx","p":"RedisCluster.html#method_setnx","d":""},{"t":"M","n":"RedisCluster::setoption","p":"RedisCluster.html#method_setoption","d":""},{"t":"M","n":"RedisCluster::setrange","p":"RedisCluster.html#method_setrange","d":""},{"t":"M","n":"RedisCluster::sinter","p":"RedisCluster.html#method_sinter","d":""},{"t":"M","n":"RedisCluster::sintercard","p":"RedisCluster.html#method_sintercard","d":""},{"t":"M","n":"RedisCluster::sinterstore","p":"RedisCluster.html#method_sinterstore","d":""},{"t":"M","n":"RedisCluster::sismember","p":"RedisCluster.html#method_sismember","d":""},{"t":"M","n":"RedisCluster::slowlog","p":"RedisCluster.html#method_slowlog","d":""},{"t":"M","n":"RedisCluster::smembers","p":"RedisCluster.html#method_smembers","d":""},{"t":"M","n":"RedisCluster::smove","p":"RedisCluster.html#method_smove","d":""},{"t":"M","n":"RedisCluster::sort","p":"RedisCluster.html#method_sort","d":""},{"t":"M","n":"RedisCluster::sort_ro","p":"RedisCluster.html#method_sort_ro","d":""},{"t":"M","n":"RedisCluster::spop","p":"RedisCluster.html#method_spop","d":""},{"t":"M","n":"RedisCluster::srandmember","p":"RedisCluster.html#method_srandmember","d":""},{"t":"M","n":"RedisCluster::srem","p":"RedisCluster.html#method_srem","d":""},{"t":"M","n":"RedisCluster::sscan","p":"RedisCluster.html#method_sscan","d":""},{"t":"M","n":"RedisCluster::strlen","p":"RedisCluster.html#method_strlen","d":""},{"t":"M","n":"RedisCluster::subscribe","p":"RedisCluster.html#method_subscribe","d":""},{"t":"M","n":"RedisCluster::sunion","p":"RedisCluster.html#method_sunion","d":""},{"t":"M","n":"RedisCluster::sunionstore","p":"RedisCluster.html#method_sunionstore","d":""},{"t":"M","n":"RedisCluster::time","p":"RedisCluster.html#method_time","d":""},{"t":"M","n":"RedisCluster::ttl","p":"RedisCluster.html#method_ttl","d":""},{"t":"M","n":"RedisCluster::type","p":"RedisCluster.html#method_type","d":""},{"t":"M","n":"RedisCluster::unsubscribe","p":"RedisCluster.html#method_unsubscribe","d":""},{"t":"M","n":"RedisCluster::unlink","p":"RedisCluster.html#method_unlink","d":""},{"t":"M","n":"RedisCluster::unwatch","p":"RedisCluster.html#method_unwatch","d":""},{"t":"M","n":"RedisCluster::watch","p":"RedisCluster.html#method_watch","d":""},{"t":"M","n":"RedisCluster::xack","p":"RedisCluster.html#method_xack","d":""},{"t":"M","n":"RedisCluster::xadd","p":"RedisCluster.html#method_xadd","d":""},{"t":"M","n":"RedisCluster::xclaim","p":"RedisCluster.html#method_xclaim","d":""},{"t":"M","n":"RedisCluster::xdel","p":"RedisCluster.html#method_xdel","d":""},{"t":"M","n":"RedisCluster::xgroup","p":"RedisCluster.html#method_xgroup","d":""},{"t":"M","n":"RedisCluster::xinfo","p":"RedisCluster.html#method_xinfo","d":""},{"t":"M","n":"RedisCluster::xlen","p":"RedisCluster.html#method_xlen","d":""},{"t":"M","n":"RedisCluster::xpending","p":"RedisCluster.html#method_xpending","d":""},{"t":"M","n":"RedisCluster::xrange","p":"RedisCluster.html#method_xrange","d":""},{"t":"M","n":"RedisCluster::xread","p":"RedisCluster.html#method_xread","d":""},{"t":"M","n":"RedisCluster::xreadgroup","p":"RedisCluster.html#method_xreadgroup","d":""},{"t":"M","n":"RedisCluster::xrevrange","p":"RedisCluster.html#method_xrevrange","d":""},{"t":"M","n":"RedisCluster::xtrim","p":"RedisCluster.html#method_xtrim","d":""},{"t":"M","n":"RedisCluster::zadd","p":"RedisCluster.html#method_zadd","d":""},{"t":"M","n":"RedisCluster::zcard","p":"RedisCluster.html#method_zcard","d":""},{"t":"M","n":"RedisCluster::zcount","p":"RedisCluster.html#method_zcount","d":""},{"t":"M","n":"RedisCluster::zincrby","p":"RedisCluster.html#method_zincrby","d":""},{"t":"M","n":"RedisCluster::zinterstore","p":"RedisCluster.html#method_zinterstore","d":""},{"t":"M","n":"RedisCluster::zintercard","p":"RedisCluster.html#method_zintercard","d":""},{"t":"M","n":"RedisCluster::zlexcount","p":"RedisCluster.html#method_zlexcount","d":""},{"t":"M","n":"RedisCluster::zpopmax","p":"RedisCluster.html#method_zpopmax","d":""},{"t":"M","n":"RedisCluster::zpopmin","p":"RedisCluster.html#method_zpopmin","d":""},{"t":"M","n":"RedisCluster::zrange","p":"RedisCluster.html#method_zrange","d":""},{"t":"M","n":"RedisCluster::zrangestore","p":"RedisCluster.html#method_zrangestore","d":""},{"t":"M","n":"RedisCluster::zrangebylex","p":"RedisCluster.html#method_zrangebylex","d":""},{"t":"M","n":"RedisCluster::zrangebyscore","p":"RedisCluster.html#method_zrangebyscore","d":""},{"t":"M","n":"RedisCluster::zrank","p":"RedisCluster.html#method_zrank","d":""},{"t":"M","n":"RedisCluster::zrem","p":"RedisCluster.html#method_zrem","d":""},{"t":"M","n":"RedisCluster::zremrangebylex","p":"RedisCluster.html#method_zremrangebylex","d":""},{"t":"M","n":"RedisCluster::zremrangebyrank","p":"RedisCluster.html#method_zremrangebyrank","d":""},{"t":"M","n":"RedisCluster::zremrangebyscore","p":"RedisCluster.html#method_zremrangebyscore","d":""},{"t":"M","n":"RedisCluster::zrevrange","p":"RedisCluster.html#method_zrevrange","d":""},{"t":"M","n":"RedisCluster::zrevrangebylex","p":"RedisCluster.html#method_zrevrangebylex","d":""},{"t":"M","n":"RedisCluster::zrevrangebyscore","p":"RedisCluster.html#method_zrevrangebyscore","d":""},{"t":"M","n":"RedisCluster::zrevrank","p":"RedisCluster.html#method_zrevrank","d":""},{"t":"M","n":"RedisCluster::zscan","p":"RedisCluster.html#method_zscan","d":""},{"t":"M","n":"RedisCluster::zscore","p":"RedisCluster.html#method_zscore","d":""},{"t":"M","n":"RedisCluster::zunionstore","p":"RedisCluster.html#method_zunionstore","d":""},{"t":"M","n":"RedisSentinel::__construct","p":"RedisSentinel.html#method___construct","d":null},{"t":"M","n":"RedisSentinel::ckquorum","p":"RedisSentinel.html#method_ckquorum","d":""},{"t":"M","n":"RedisSentinel::failover","p":"RedisSentinel.html#method_failover","d":""},{"t":"M","n":"RedisSentinel::flushconfig","p":"RedisSentinel.html#method_flushconfig","d":""},{"t":"M","n":"RedisSentinel::getMasterAddrByName","p":"RedisSentinel.html#method_getMasterAddrByName","d":""},{"t":"M","n":"RedisSentinel::master","p":"RedisSentinel.html#method_master","d":""},{"t":"M","n":"RedisSentinel::masters","p":"RedisSentinel.html#method_masters","d":""},{"t":"M","n":"RedisSentinel::myid","p":"RedisSentinel.html#method_myid","d":null},{"t":"M","n":"RedisSentinel::ping","p":"RedisSentinel.html#method_ping","d":""},{"t":"M","n":"RedisSentinel::reset","p":"RedisSentinel.html#method_reset","d":""},{"t":"M","n":"RedisSentinel::sentinels","p":"RedisSentinel.html#method_sentinels","d":""},{"t":"M","n":"RedisSentinel::slaves","p":"RedisSentinel.html#method_slaves","d":""},{"t":"N","n":"","p":"[Global_Namespace].html"}]}
